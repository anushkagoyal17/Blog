[1mdiff --git a/account/__pycache__/emails.cpython-310.pyc b/account/__pycache__/emails.cpython-310.pyc[m
[1mindex 5562e16..8b4a25c 100644[m
Binary files a/account/__pycache__/emails.cpython-310.pyc and b/account/__pycache__/emails.cpython-310.pyc differ
[1mdiff --git a/account/__pycache__/serializers.cpython-310.pyc b/account/__pycache__/serializers.cpython-310.pyc[m
[1mindex f4bcd72..afe2777 100644[m
Binary files a/account/__pycache__/serializers.cpython-310.pyc and b/account/__pycache__/serializers.cpython-310.pyc differ
[1mdiff --git a/account/__pycache__/urls.cpython-310.pyc b/account/__pycache__/urls.cpython-310.pyc[m
[1mindex aa1656e..e9a7fef 100644[m
Binary files a/account/__pycache__/urls.cpython-310.pyc and b/account/__pycache__/urls.cpython-310.pyc differ
[1mdiff --git a/account/__pycache__/views.cpython-310.pyc b/account/__pycache__/views.cpython-310.pyc[m
[1mindex 112e63b..809f913 100644[m
Binary files a/account/__pycache__/views.cpython-310.pyc and b/account/__pycache__/views.cpython-310.pyc differ
[1mdiff --git a/account/emails.py b/account/emails.py[m
[1mindex 357e5d3..029947c 100644[m
[1m--- a/account/emails.py[m
[1m+++ b/account/emails.py[m
[36m@@ -12,4 +12,14 @@[m [mdef send_otp_via_mail(email):[m
     send_mail(subject, message, email_from, [email])[m
     user = User.objects.get(email=email)[m
     user.otp = otp[m
[31m-    user.save()[m
\ No newline at end of file[m
[32m+[m[32m    user.save()[m
[32m+[m
[32m+[m[32mdef password_reset_mail(email, uid, token):[m
[32m+[m[32m    subject = 'Reset Your Password'[m
[32m+[m[32m    link = f'http://127.0.0.1:8000/api/user/reset-password/{uid}/{token}'[m
[32m+[m[32m    message = f"Please reset your password- {link}"[m
[32m+[m[32m    email_from = settings.EMAIL_HOST[m
[32m+[m[32m    send_mail(subject, message, email_from, [email])[m
[32m+[m[32m    # user = User.objects.get(email=email)[m
[32m+[m[32m    # user.link = link[m
[32m+[m[32m    # user.save()[m
\ No newline at end of file[m
[1mdiff --git a/account/serializers.py b/account/serializers.py[m
[1mindex 25ba4b0..3da77f8 100644[m
[1m--- a/account/serializers.py[m
[1m+++ b/account/serializers.py[m
[36m@@ -2,6 +2,9 @@[m [mimport re, logging[m
 from rest_framework_simplejwt.serializers import TokenObtainPairSerializer[m
 from .models import User, Blog[m
 from rest_framework import serializers[m
[32m+[m[32mfrom django.contrib.auth.tokens import PasswordResetTokenGenerator[m
[32m+[m[32mfrom django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode[m
[32m+[m[32mfrom django.utils.encoding import smart_str[m
 [m
 [m
 logger = logging.getLogger('django')[m
[36m@@ -82,3 +85,52 @@[m [mclass BlogSerializer(serializers.ModelSerializer):[m
         fields = '__all__'[m
         read_only_fields = ['user'][m
 [m
[32m+[m
[32m+[m[32mclass ForgetPasswordSerializer(serializers.Serializer):[m
[32m+[m[32m    email = serializers.EmailField(required=True)[m
[32m+[m
[32m+[m[32m    class Meta:[m
[32m+[m[32m        # model = User[m
[32m+[m[32m        fields = ['email',][m
[32m+[m
[32m+[m[32m    # def validate(self, attrs):[m
[32m+[m[32m    #     try:[m
[32m+[m[32m    #         email = attrs.get('email','')[m
[32m+[m[32m    #         if User.objects.filter(email=email).exists():[m
[32m+[m[32m    #             user = User.objects.get(email=email)[m
[32m+[m[32m    #             uid = urlsafe_base64_encode(user.id)[m
[32m+[m[32m    #             token = PasswordResetTokenGenerator().make_token(user)[m
[32m+[m[32m    #     except:[m
[32m+[m[32m    #         pass[m
[32m+[m[32m    def create(self, validated_data):[m
[32m+[m[32m        return User.objects.update(**validated_data)[m
[32m+[m
[32m+[m[32mclass ChangePasswordSerializer(serializers.ModelSerializer):[m
[32m+[m[32m    password = serializers.CharField(required=True)[m
[32m+[m[32m    password2 = serializers.CharField(required=True)[m
[32m+[m
[32m+[m[32m    class Meta:[m
[32m+[m[32m        model = User[m
[32m+[m[32m        fields = ['password', 'password2'][m
[32m+[m
[32m+[m[32m    def validate(self, attrs):[m
[32m+[m[32m        password = attrs.get('password')[m
[32m+[m[32m        password2 = attrs.get('password2')[m
[32m+[m[32m        import pdb; pdb.set_trace()[m
[32m+[m[32m        uid = self.context.get('uid')[m
[32m+[m[32m        token = self.context.get('token')[m
[32m+[m[32m        # context = {[m
[32m+[m[32m        #         'token': token,[m
[32m+[m[32m        #         }[m
[32m+[m[32m        id = smart_str(urlsafe_base64_decode(uid))[m
[32m+[m[32m        user = User.objects.get(id=id)[m
[32m+[m[32m        if not PasswordResetTokenGenerator().check_token(user, token):[m
[32m+[m[32m            raise serializers.ValidationError('Token is not Valid or Expired')[m
[32m+[m[32m        if password != password2:[m
[32m+[m[32m            raise serializers.ValidationError("Password and Confirm Password doesn't match")[m
[32m+[m[32m        user.set_password(password)[m
[32m+[m[32m        user.save()[m
[32m+[m[32m        return attrs[m
[32m+[m[41m        [m
[32m+[m[32m    def create(self, validated_data):[m
[32m+[m[32m        return User.objects.update(**validated_data)[m
[1mdiff --git a/account/urls.py b/account/urls.py[m
[1mindex 5742c2b..c10ab41 100644[m
[1m--- a/account/urls.py[m
[1m+++ b/account/urls.py[m
[36m@@ -1,6 +1,6 @@[m
 from django.urls import path[m
 from .views import UserRegistrationView, UserLoginView, VerifyOTP, CreateNewBlog, \[m
[31m-PublishedBlogsView[m
[32m+[m[32mPublishedBlogsView, UserForgetPassword, ResetPassword[m
 [m
 [m
 urlpatterns = [[m
[36m@@ -14,6 +14,9 @@[m [murlpatterns = [[m
     path('delete-blog/<int:blog_id>/', CreateNewBlog.as_view(), name='delete-blog'),[m
     # path('view-blog/', CreateNewBlog.as_view(), name='view-blog'),[m
     path('home/', PublishedBlogsView.as_view()),[m
[32m+[m[32m    path('forget-password/', UserForgetPassword.as_view(), name='forget-password'),[m
[32m+[m[32m    # path('reset-password/', ResetPassword.as_view(), name='reset-password'),[m
[32m+[m[41m    [m
 [m
     # path('<str:username>/', CreateNewBlog.as_view()),[m
     # path('<str:username>/blogs/', CreateNewBlog.as_view()),[m
[1mdiff --git a/account/views.py b/account/views.py[m
[1mindex 329d370..ce4b6c4 100644[m
[1m--- a/account/views.py[m
[1m+++ b/account/views.py[m
[36m@@ -5,13 +5,14 @@[m [mfrom account.renderers import UserRenderer[m
 from .models import User, Blog[m
 from rest_framework.response import Response[m
 from .serializers import UserSerializer, CustomTokenObtainPairSerializer, \[m
[31m-VerifyAccountSerializer, BlogSerializer[m
[32m+[m[32mVerifyAccountSerializer, BlogSerializer, ChangePasswordSerializer, ForgetPasswordSerializer[m
 from rest_framework import status, serializers[m
 from django.contrib.auth import authenticate[m
 from django.utils.http import urlsafe_base64_encode[m
 from django.utils.encoding import force_bytes[m
[31m-from .emails import send_otp_via_mail[m
[32m+[m[32mfrom .emails import send_otp_via_mail, password_reset_mail[m
 from rest_framework.permissions import IsAuthenticated[m
[32m+[m[32mfrom django.contrib.auth.tokens import PasswordResetTokenGenerator[m
 [m
 [m
 logger = logging.getLogger('django')[m
[36m@@ -208,13 +209,56 @@[m [mclass PublishedBlogsView(GenericAPIView):[m
     renderer_classes = (UserRenderer,)[m
     # permission_classes = (IsAuthenticated,)[m
     serializer_class = BlogSerializer[m
[31m-    print('hola')[m
 [m
     def get(self, request, format=None):[m
[31m-        user = request.user[m
[31m-        print('i m also')[m
[31m-        import pdb; pdb.set_trace()[m
[31m-        blogs = Blog.objects.all()[m
[32m+[m[32m        blogs = Blog.objects.filter(is_published='Yes')[m
         serializer = BlogSerializer(blogs, many=True)[m
[31m-        return Response(serializer.data, status=status.HTTP_200_OK)[m
[32m+[m[32m        return Response({'blogs':serializer.data}, status=status.HTTP_200_OK)[m
[32m+[m
[32m+[m
[32m+[m[32mclass UserForgetPassword(GenericAPIView):[m
[32m+[m[32m    renderer_classes = (UserRenderer,)[m
[32m+[m[32m    serializer_class = ForgetPasswordSerializer[m
[32m+[m
[32m+[m[32m    def post(self, request, format=None):[m
[32m+[m[32m        try:[m
[32m+[m[32m            # import pdb; pdb.set_trace()[m
[32m+[m[32m            email = request.data.get('email')[m
[32m+[m[32m            serializer = self.serializer_class(data=request.data)[m
[32m+[m[32m            serializer.is_valid(raise_exception=True)[m
[32m+[m[32m            # serializer.save()[m
[32m+[m
[32m+[m[32m            if User.objects.filter(email=email).exists():[m
[32m+[m[32m                # user = User.objects.get(email=email)[m
[32m+[m[32m                # uid = user.id[m
[32m+[m[32m                uid = urlsafe_base64_encode(force_bytes(user.id))[m
[32m+[m[32m                user = User.objects.get(email=email)[m
[32m+[m[32m                token = PasswordResetTokenGenerator().make_token(user)[m
[32m+[m[32m                password_reset_mail(serializer.data['email'], token, uid)[m
[32m+[m[32m            return Response({'msg': f'Password Reset URL is sent to your email {email}.'},[m
[32m+[m[32m                            status=status.HTTP_201_CREATED)[m
[32m+[m[32m        except Exception as e:[m
[32m+[m[32m            logger.error(e)[m
[32m+[m[32m            return Response(str(e), status=status.HTTP_500_INTERNAL_SERVER_ERROR)[m
[32m+[m[41m            [m
[32m+[m
[32m+[m[32mclass ResetPassword(GenericAPIView):[m
[32m+[m[32m    renderer_classes = (UserRenderer,)[m
[32m+[m[32m    serializer_class = ChangePasswordSerializer[m
 [m
[32m+[m[32m    def post(self, request, uid, token, format=None):[m
[32m+[m[32m        import pdb; pdb.set_trace()[m
[32m+[m[32m        # password = request.data.get('password')[m
[32m+[m[32m        # # password1 = request.data.get('password2')[m
[32m+[m[32m        # user = request.user[m
[32m+[m[41m        [m
[32m+[m[32m        # serializer = self.serializer_class(data=request.data)[m
[32m+[m[32m        # serializer.is_valid(raise_exception=True)[m
[32m+[m[32m        # user.set_password(password)[m
[32m+[m[32m        # user.save()[m
[32m+[m[32m        # return Response({'msg': 'Password Reset Successfully'}, status=status.HTTP_201_CREATED)[m
[32m+[m[32m        self.http_method_names.append("GET")[m
[32m+[m[32m        serializer = self.serializer_class(data=request.data, context={'uid': uid, 'token': token})[m
[32m+[m[32m        serializer.is_valid(raise_exception=True)[m
[32m+[m[32m        serializer.save()[m
[32m+[m[32m        return Response({'msg': 'Password Reset Successfully'}, status=status.HTTP_201_CREATED)[m
[1mdiff --git a/blog/__pycache__/settings.cpython-310.pyc b/blog/__pycache__/settings.cpython-310.pyc[m
[1mindex db99353..2d9194d 100644[m
Binary files a/blog/__pycache__/settings.cpython-310.pyc and b/blog/__pycache__/settings.cpython-310.pyc differ
[1mdiff --git a/blog/__pycache__/urls.cpython-310.pyc b/blog/__pycache__/urls.cpython-310.pyc[m
[1mindex 0c56857..92100b8 100644[m
Binary files a/blog/__pycache__/urls.cpython-310.pyc and b/blog/__pycache__/urls.cpython-310.pyc differ
[1mdiff --git a/blog/settings.py b/blog/settings.py[m
[1mindex 7428668..0e28886 100644[m
[1m--- a/blog/settings.py[m
[1m+++ b/blog/settings.py[m
[36m@@ -31,6 +31,7 @@[m [mINSTALLED_APPS = [[m
     'rest_framework',[m
     'rest_framework_simplejwt',[m
     'rest_framework_simplejwt.token_blacklist',[m
[32m+[m[32m    'corsheaders',[m
 ][m
 [m
 MIDDLEWARE = [[m
[36m@@ -41,6 +42,7 @@[m [mMIDDLEWARE = [[m
     'django.contrib.auth.middleware.AuthenticationMiddleware',[m
     'django.contrib.messages.middleware.MessageMiddleware',[m
     'django.middleware.clickjacking.XFrameOptionsMiddleware',[m
[32m+[m[32m    'corsheaders.middleware.CorsMiddleware',[m
 ][m
 [m
 ROOT_URLCONF = 'blog.urls'[m
[36m@@ -165,3 +167,11 @@[m [mMEDIA_ROOT = os.path.join(BASE_DIR, 'files')[m
 [m
 MEDIA_URL = '/files/'[m
 [m
[32m+[m
[32m+[m[32m# Frontend Settings[m
[32m+[m[32mCORS_ORIGIN_WHITELIST = ([m
[32m+[m[32m    'http://localhost:3000',[m
[32m+[m[32m    'http://127.0.0.1:3000',[m
[32m+[m[32m    'https://localhost:3000',[m
[32m+[m[32m    'https://127.0.0.1:3000',[m
[32m+[m[32m)[m
\ No newline at end of file[m
[1mdiff --git a/blog/urls.py b/blog/urls.py[m
[1mindex f5b1e29..25486c1 100644[m
[1m--- a/blog/urls.py[m
[1m+++ b/blog/urls.py[m
[36m@@ -1,25 +1,12 @@[m
[31m-"""blog URL Configuration[m
[31m-[m
[31m-The `urlpatterns` list routes URLs to views. For more information please see:[m
[31m-    https://docs.djangoproject.com/en/4.1/topics/http/urls/[m
[31m-Examples:[m
[31m-Function views[m
[31m-    1. Add an import:  from my_app import views[m
[31m-    2. Add a URL to urlpatterns:  path('', views.home, name='home')[m
[31m-Class-based views[m
[31m-    1. Add an import:  from other_app.views import Home[m
[31m-    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')[m
[31m-Including another URLconf[m
[31m-    1. Import the include() function: from django.urls import include, path[m
[31m-    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))[m
[31m-"""[m
 from django.contrib import admin[m
 from django.urls import path, include[m
[31m-# from account.views import UserEmailVerificationView[m
[32m+[m[32mfrom account.views import ResetPassword[m
 [m
 [m
 urlpatterns = [[m
     path('admin/', admin.site.urls),[m
     path('api/user/', include('account.urls')),[m
[32m+[m[32m    path('reset-password/<token>', ResetPassword.as_view(), name='reset-password'),[m
[32m+[m
     # path('verify-email/<uid>/<email_token>', UserEmailVerificationView.as_view(), name='verify-email'),[m
 ][m
\ No newline at end of file[m
[1mdiff --git a/help.txt b/help.txt[m
[1mindex 3ae1c3e..5bca3ba 100644[m
[1m--- a/help.txt[m
[1m+++ b/help.txt[m
[36m@@ -1,2 +1,5 @@[m
 Token Password for GitHub-[m
[31m-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[m
[32m+[m[32m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[m
[32m+[m
[32m+[m[32mFor FE-[m
[32m+[m[32m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[m
